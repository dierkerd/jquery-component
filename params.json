{
  "name": "Jquery-component",
  "tagline": "Create a component with jQuery. Inspired by Backbone View model.",
  "body": "# jQuery.component\r\n\r\nCreate a component with jQuery. Inspired by Backbone View model.\r\n\r\n![release](https://img.shields.io/badge/release-1.3.2-blue.svg)\r\n![coverage](https://img.shields.io/badge/coverage-70%25-green.svg)\r\n[![license](https://img.shields.io/badge/license-MIT%20License-blue.svg)](https://opensource.org/licenses/MIT)\r\n[![requirement](https://img.shields.io/badge/jquery-required-lightgrey.svg)](https://www.npmjs.com/package/jquery)\r\n[![requirement](https://img.shields.io/badge/lodash-required-lightgrey.svg)](https://www.npmjs.com/package/lodash)\r\n\r\n## Requirement\r\nYou must include in your html jQuery and lodash.\r\n\r\n## How to install\r\n```terminal\r\nnpm install --save jquery.component\r\n```\r\nInclude in your .html this library after jQuery and lodash files.\r\n\r\n## How it works\r\n### Basically\r\njquery.component uses template method of lodash so you can integrate a template in your .html. For example:\r\n```html\r\n<script type=\"text/template\" id=\"title-template\">\r\n  <div>\r\n    <h1><%= data.title %></h1>\r\n    <p class=\"content\"></p>\r\n  </div>\r\n</script>\r\n```\r\nThen in your js file, call your template and declare events in component method:\r\n```javascript\r\nvar titleComponent = $.component({\r\n  template: $('#title-template').html(),\r\n  events: {\r\n    'click h1': function() {\r\n      $(this).parent().find('p').append('Hello everyone !');\r\n    }\r\n  }\r\n});\r\n```\r\nAfter you can use your component with some data by using the render method:\r\n```javascript\r\n$('body').append(titleComponent.render({\r\n  title: 'Hello World'\r\n}));\r\n```\r\n### Children\r\nIf you want to include another component or element in your component. You can use `data-children` attribute in the parent container:\r\n```html\r\n<script type=\"text/template\" id=\"parent-template\">\r\n  <div>\r\n      <h1>Hello World</h1>\r\n      <div data-children></div>\r\n  </div>\r\n</script>\r\n\r\n<script type=\"text/template\" id=\"children-template\">\r\n  <h2>Hello Everyone</h2>\r\n</script>\r\n\r\n<script>\r\n  var children = $.component({\r\n    template: $('#children-template').html()\r\n  });\r\n\r\n  var parent = $.component({\r\n    template: $('#parent-template').html(),\r\n    children: children.render()\r\n  });\r\n</script>\r\n```\r\n`children` attribute accept an array of components or elements.\r\n\r\nBy the way, if you declare an object into children attribute, use `data-child` with the key name:\r\n```html\r\n<script type=\"text/template\" id=\"title-primary-template\">\r\n  <div>\r\n    <h1>Hello World</h1>\r\n    <div data-child=\"titleSecondary\"></div>\r\n    <div data-child=\"paragraph\"></div>\r\n  </div>\r\n</script>\r\n\r\n<script type=\"text/template\" id=\"title-secondary-template\">\r\n  <h2>Hello Everyone</h2>\r\n</script>\r\n\r\n<script type=\"text/template\" id=\"paragraph-template\">\r\n  <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.</p>\r\n</script>\r\n\r\n<script>\r\n  var titleSecondary = $.component({\r\n    template: $('#title-secondary-template').html()\r\n  });\r\n\r\n  var paragraph = $.component({\r\n    template: $('#paragraph-template').html()\r\n  });\r\n\r\n  var titlePrimary = $.component({\r\n    template: $('#title-primary-template').html(),\r\n    children: {\r\n      'titleSecondary': titleSecondary.render(),\r\n      'paragraph': paragraph.render()\r\n    }\r\n  });\r\n\r\n  $('body').append(titlePrimary.render());\r\n</script>\r\n```\r\n### Bind data\r\nYou can also bind your data by declaring a `data-bind-id` attribute with a name and then apply a `data-bind` attribute to another element with the name target. Follow this example:\r\n```html\r\n<script type=\"text/template\" id=\"name-template\">\r\n  <div>\r\n    <h1>My name is <span data-bind=\"name\"></span></h1>\r\n    <input type=\"text\" data-bind-id=\"name\"/>\r\n  </div>\r\n</script>\r\n\r\n<script type=\"text/javascript\">\r\n  var componentName = $.component({\r\n    template: $('#name-template').html(),\r\n  });\r\n\r\n  $('body').append(componentName.render());\r\n</script>\r\n```\r\nIt's possible to pass a callback method in $.component:\r\n```javascript\r\nvar componentName = $.component({\r\n  template: $('#name-template').html(),\r\n  bindData: function (val) {\r\n    return val + val;\r\n  }\r\n});\r\n```\r\n### Lifecycle of component\r\n- `componentWillMount` method option will run before the render of component.\r\n- `componentDidMount` method option will run after the render of component.\r\n- `componentWillUpdate` each time, method option will run before the component re-renders. As argument, you can use old declared data.\r\n- `componentDidUpdate` each time, method option will run after the component re-renders. As argument, you can use old declared data.\r\n\r\n## Contributing\r\n1. Fork it\r\n2. Create your feature branch (git checkout -b my-new-feature)\r\n3. Commit your changes (git commit -am 'Added some feature')\r\n4. Push to the branch (git push origin my-new-feature)\r\n5. Create new Pull Request\r\n\r\n## Licence\r\n```\r\nMIT\r\n```\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}